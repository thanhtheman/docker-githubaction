name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  # MONGODB_DB_NAME: gha-demo
  MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # container:
    #   image: node:16
    # env: # this is to connect to MongoDB Atlas
    #   MONGODB_CONNECTION_PROTOCOL: ${{ secrets.MONGODB_CONNECTION_PROTOCOL }}
    #   MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
    #   MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
    #   MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    #   PORT: 8080
    # env: # this is to connect to the MongoDB service container given we run on image node:16
    #   MONGODB_CONNECTION_PROTOCOL: mongodb # this is a required syntax to connect to the service container
    #   MONGODB_CLUSTER_ADDRESS: mongodb-testing # github makes it so simple in term of networking to connect with service containers
    #   MONGODB_USERNAME: root
    #   MONGODB_PASSWORD: example
    #   PORT: 8080
    env: # this is to connect to the MongoDB service container given we run on ubuntu-latest
      MONGODB_CONNECTION_PROTOCOL: mongodb # this is a required syntax to connect to the service container
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017 # we need to assign a port to the service container 
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080
    services: # not run on the runner, but as a container on github servers
      mongodb-testing: #any name you like
        image: mongo
        ports: #mapping the port from the machine to the image
          - 27017:27017
        env: # we create a new database
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
